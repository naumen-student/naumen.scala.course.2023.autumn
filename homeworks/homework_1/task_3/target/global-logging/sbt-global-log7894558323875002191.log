[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Пользователь\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Пользователь\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 21)
[debug]       Load.loadUnit: plugins took 72.0458ms
[debug]       Load.loadUnit: defsScala took 0.321ms
[debug] [Loading] Scanning directory C:\Users\Пользователь\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Пользователь\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.143299 ms
[debug]           Load.resolveProject(global-plugins) took 22.545599ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Пользователь\.sbt\1.0\plugins, plugins: List(<none>))) took 41.327999ms
[debug] [Loading] Done in C:\Users\Пользователь\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 52.839301ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.14ms
[debug]     Load.loadUnit(file:/C:/Users/Пользователь/.sbt/1.0/plugins/, ...) took 131.0592ms
[debug]   Load.apply: load took 280.5719ms
[debug]   Load.apply: resolveProjects took 3.5447ms
[debug]   Load.apply: finalTransforms took 88.272201ms
[debug]   Load.apply: config.delegates took 6.4291ms
[debug]   Load.apply: Def.make(settings)... took 370.293ms
[debug]   Load.apply: structureIndex took 104.0549ms
[debug]   Load.apply: mkStreams took 2.800599ms
[info] loading global plugins from C:\Users\Пользователь\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1990.8926ms
[debug]           Load.loadUnit: plugins took 18.3328ms
[debug]           Load.loadUnit: defsScala took 0.002799ms
[debug] [Loading] Scanning directory C:\Users\Пользователь\IdeaProjects\helloworld\project
[debug]             Load.loadUnit: mkEval took 3.184899ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Пользователь\IdeaProjects\helloworld\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4209 ms
[info] loading settings for project helloworld-build from idea.sbt ...
[debug]               Load.resolveProject(helloworld-build) took 5.3529ms
[debug]             Load.loadTransitive: finalizeProject(Project(id helloworld-build, base: C:\Users\Пользователь\IdeaProjects\helloworld\project, plugins: List(<none>))) took 7.2181ms
[debug] [Loading] Done in C:\Users\Пользователь\IdeaProjects\helloworld\project, returning: (helloworld-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 107.493599ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7885ms
[debug]         Load.loadUnit(file:/C:/Users/Пользователь/IdeaProjects/helloworld/project/, ...) took 129.310299ms
[debug]       Load.apply: load took 130.2426ms
[debug]       Load.apply: resolveProjects took 0.0774ms
[debug]       Load.apply: finalTransforms took 13.8458ms
[debug]       Load.apply: config.delegates took 0.2393ms
[debug]       Load.apply: Def.make(settings)... took 67.595401ms
[debug]       Load.apply: structureIndex took 19.3463ms
[debug]       Load.apply: mkStreams took 0.0018ms
[info] loading project definition from C:\Users\Пользователь\IdeaProjects\helloworld\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1176.0036ms
[debug]     Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory C:\Users\Пользователь\IdeaProjects\helloworld
[debug]       Load.loadUnit: mkEval took 0.1377ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.0124 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 43.093601ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Пользователь\IdeaProjects\helloworld, plugins: List(<none>))) took 47.1819ms
[debug] [Loading] Done in C:\Users\Пользователь\IdeaProjects\helloworld, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1894.481899ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.5239ms
[debug]   Load.loadUnit(file:/C:/Users/Пользователь/IdeaProjects/helloworld/, ...) took 3078.866301ms
[debug] Load.apply: load took 3080.555999ms
[debug] Load.apply: resolveProjects took 0.0895ms
[debug] Load.apply: finalTransforms took 17.1179ms
[debug] Load.apply: config.delegates took 0.1978ms
[debug] Load.apply: Def.make(settings)... took 57.3093ms
[debug] Load.apply: structureIndex took 19.9891ms
[debug] Load.apply: mkStreams took 0.002499ms
[info] set current project to helloworld (in build file:/C:/Users/Пользователь/IdeaProjects/helloworld/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51085 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51085, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to helloworld (in build file:/C:/Users/Пользователь/IdeaProjects/helloworld/)
[debug] > Exec(idea-shell, None, None)
