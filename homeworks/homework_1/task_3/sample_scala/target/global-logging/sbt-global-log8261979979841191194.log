[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Garipov\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Garipov\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 234.801ms
[debug]       Load.loadUnit: defsScala took 1.6732ms
[debug] [Loading] Scanning directory C:\Users\Garipov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Garipov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 75.2716 ms
[debug]           Load.resolveProject(global-plugins) took 158.1661ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Garipov\.sbt\1.0\plugins, plugins: List(<none>))) took 308.5968ms
[debug] [Loading] Done in C:\Users\Garipov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 391.4321ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.9889ms
[debug]     Load.loadUnit(file:/C:/Users/Garipov/.sbt/1.0/plugins/, ...) took 683.3314ms
[debug]   Load.apply: load took 1080.01ms
[debug]   Load.apply: resolveProjects took 26.1165ms
[debug]   Load.apply: finalTransforms took 165.4505ms
[debug]   Load.apply: config.delegates took 13.2321ms
[debug]   Load.apply: Def.make(settings)... took 673.5397ms
[debug]   Load.apply: structureIndex took 281.8189ms
[debug]   Load.apply: mkStreams took 2.289ms
[info] loading global plugins from C:\Users\Garipov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4550.6012ms
[debug]           Load.loadUnit: plugins took 33.1132ms
[debug]           Load.loadUnit: defsScala took 0.0061ms
[debug] [Loading] Scanning directory C:\Users\Garipov\IdeaProjects\sample_scala\project
[debug]             Load.loadUnit: mkEval took 9.4367ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Garipov\IdeaProjects\sample_scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2614 ms
[info] loading settings for project sample_scala-build from idea.sbt ...
[debug]               Load.resolveProject(sample_scala-build) took 6.4789ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sample_scala-build, base: C:\Users\Garipov\IdeaProjects\sample_scala\project, plugins: List(<none>))) took 9.6042ms
[debug] [Loading] Done in C:\Users\Garipov\IdeaProjects\sample_scala\project, returning: (sample_scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3688.7347ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.2989ms
[debug]         Load.loadUnit(file:/C:/Users/Garipov/IdeaProjects/sample_scala/project/, ...) took 3732.5381ms
[debug]       Load.apply: load took 3736.4001ms
[debug]       Load.apply: resolveProjects took 0.1995ms
[debug]       Load.apply: finalTransforms took 17.4934ms
[debug]       Load.apply: config.delegates took 0.752ms
[debug]       Load.apply: Def.make(settings)... took 97.9433ms
[debug]       Load.apply: structureIndex took 33.5325ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\Garipov\IdeaProjects\sample_scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 8624.5194ms
[debug]     Load.loadUnit: defsScala took 0.0086ms
[debug] [Loading] Scanning directory C:\Users\Garipov\IdeaProjects\sample_scala
[debug]       Load.loadUnit: mkEval took 0.7428ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.47 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 43.388ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Garipov\IdeaProjects\sample_scala, plugins: List(<none>))) took 49.4726ms
[debug] [Loading] Done in C:\Users\Garipov\IdeaProjects\sample_scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2899.6249ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.5977ms
[debug]   Load.loadUnit(file:/C:/Users/Garipov/IdeaProjects/sample_scala/, ...) took 11547.9964ms
[debug] Load.apply: load took 11549.9404ms
[debug] Load.apply: resolveProjects took 0.1327ms
[debug] Load.apply: finalTransforms took 31.4971ms
[debug] Load.apply: config.delegates took 0.4214ms
[debug] Load.apply: Def.make(settings)... took 77.8846ms
[debug] Load.apply: structureIndex took 33.4074ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to sample_scala (in build file:/C:/Users/Garipov/IdeaProjects/sample_scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55664 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55664, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to sample_scala (in build file:/C:/Users/Garipov/IdeaProjects/sample_scala/)
[debug] > Exec(idea-shell, None, None)
